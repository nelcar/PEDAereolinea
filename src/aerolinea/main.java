/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aerolinea;

import edu.uci.ics.jung.graph.DirectedGraph;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Inspiron
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    private TDAGraph grafo;
    private Queue<String> ciudades;
    private ArrayList caminos;
    private ArrayList numeros;
    private int fila;
    private DirectedGraph<Viaje, Arista> Grafo;

    public main() {
        initComponents();
        this.setLocationRelativeTo(this);
        panelRuta.setEnabled(false);
        agregarPasaje.setEnabled(false);
        hastaComboBox.setEnabled(false);
        ciudades = new LinkedList<String>();
        grafo = new TDAGraph();
        cargarComboBoxs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCalcular = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hastaComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        desdeComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAgregado = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        agregarPasaje = new javax.swing.JButton();
        labelRuta = new javax.swing.JLabel();
        panelRuta = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaCalcular.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Aereolinea", "Desde", "Para", "Precio", "Boletos Disponibles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCalcular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCalcularMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCalcular);

        jLabel1.setText("Desde:");

        jLabel2.setText("Hasta:");

        hastaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hastaComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setText("AEROLINEA");

        desdeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desdeComboBoxActionPerformed(evt);
            }
        });

        tablaAgregado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Aereolinea", "Desde", "Para", "Precio", "Pasajes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaAgregado);

        jButton2.setText("Ver todas las Rutas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        agregarPasaje.setText("Agregar Pasaje");
        agregarPasaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPasajeActionPerformed(evt);
            }
        });

        labelRuta.setText("Ruta:");

        javax.swing.GroupLayout panelRutaLayout = new javax.swing.GroupLayout(panelRuta);
        panelRuta.setLayout(panelRutaLayout);
        panelRutaLayout.setHorizontalGroup(
            panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        panelRutaLayout.setVerticalGroup(
            panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jButton1.setText("Comprar");

        jButton3.setText("Calcular");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(agregarPasaje)
                                    .addGap(83, 83, 83)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(91, 91, 91)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(desdeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(hastaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(jLabel3)
                                    .addGap(0, 0, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelRuta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(hastaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(desdeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarPasaje)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelRuta)
                    .addComponent(panelRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hastaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hastaComboBoxActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaCalcular.getModel();
        while (tablaCalcular.getRowCount() > 0) {
            modelo.removeRow(0);
        }
        try {
            File archivo = new File(".\\Precio.txt");
            FileReader fileReader = new FileReader(archivo);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String temporal, desde, hacia, precio, aereolinea;
            StringTokenizer tokens = null;
            while ((temporal = bufferedReader.readLine()) != null) {
                tokens = new StringTokenizer(temporal, "@");
                while (tokens.hasMoreTokens()) {
                    aereolinea = tokens.nextToken();
                    desde = tokens.nextToken();
                    hacia = tokens.nextToken();
                    precio = tokens.nextToken();
                    if (desde.equals(desdeComboBox.getSelectedItem())
                            && hacia.equals(hastaComboBox.getSelectedItem())) {
                        double p = Double.parseDouble(precio);
                        Object[] data = {aereolinea, desde, hacia, p, random()};
                        modelo.addRow(data);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            //JOptionPane.showMessageDialog(null, "No se pueden cargar los vertices");
        }
    }//GEN-LAST:event_hastaComboBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        Grafo = new DirectedSparseMultigraph<>();

        try {
            File Archivo = new File(".\\lugares.txt");
            Scanner E = new Scanner(Archivo);
            while (E.hasNext()) {
                String[] NewLine = E.nextLine().split("@");
                Viaje R1 = new Viaje(NewLine[0], "Test");
                Viaje R2 = new Viaje(NewLine[1], "Test");

                Viaje Vertex1 = checkNode(R1);
                Viaje Vertex2 = checkNode(R2);

                if (Vertex1 == null) {
                    Grafo.addVertex(R1);
                    Vertex1 = R1;
                }
                if (Vertex2 == null) {
                    Grafo.addVertex(R2);
                    Vertex2 = R2;
                }

                Arista Edge = new Arista(Grafo.getEdgeCount() + 1, Double.parseDouble(NewLine[2]));

                Grafo.addEdge(Edge, Vertex1, Vertex2);
            }
        } catch (Exception e) {

        }
        Graficar g = new Graficar();
        g.paintGraph(Grafo);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void desdeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desdeComboBoxActionPerformed
        // TODO add your handling code here:
        hastaComboBox.removeAllItems();
        hastaComboBox.setEnabled(true);
        String seleccionado = (String) desdeComboBox.getSelectedItem();
        try {
            File archivo = new File(".\\Precio.txt");
            FileReader fileReader = new FileReader(archivo);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String temporal, desde, hacia, precio, aereolinea;
            StringTokenizer tokens = null;
            while ((temporal = bufferedReader.readLine()) != null) {
                tokens = new StringTokenizer(temporal, "@");
                while (tokens.hasMoreTokens()) {
                    aereolinea = tokens.nextToken();
                    desde = tokens.nextToken();
                    hacia = tokens.nextToken();
                    precio = tokens.nextToken();
                    if (desde.equals(seleccionado)) {
                        hastaComboBox.addItem(hacia);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No se pueden cargar los vertices");
        }
    }//GEN-LAST:event_desdeComboBoxActionPerformed

    private void tablaCalcularMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCalcularMouseClicked
        // TODO add your handling code here:
        setFila(tablaCalcular.getSelectedRow());
        agregarPasaje.setEnabled(true);
    }//GEN-LAST:event_tablaCalcularMouseClicked

    private void agregarPasajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPasajeActionPerformed
        // TODO add your handling code here:
        int boletos = (Integer) tablaCalcular.getValueAt(fila, 4);
        if (boletos <= 0) {
            JOptionPane.showMessageDialog(this, "No hay boletos dispoibles para este vuelo");
        } else {
            try {
                int cant = Integer.parseInt(JOptionPane.showInputDialog("Ingrese cantidad de boletos: "));
                if (cant > boletos) {
                    JOptionPane.showMessageDialog(this, "No hay esa cantidad de boletos disponibles");
                } else {
                    DefaultTableModel modelo = (DefaultTableModel) tablaAgregado.getModel();
                    String aereolinea = (String) tablaCalcular.getValueAt(fila, 0);
                    String desde = (String) tablaCalcular.getValueAt(fila, 1);
                    String hacia = (String) tablaCalcular.getValueAt(fila, 2);
                    double p = (double) tablaCalcular.getValueAt(fila, 3);
                    Object[] data = {aereolinea, desde, hacia, p, cant};
                    modelo.addRow(data);
                    ciudades.add(desde);
                }
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_agregarPasajeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (!ciudades.isEmpty()) {
            caminos = grafo.calcularCamino(ciudades);
            System.out.println(caminos.get(0).toString());
            System.out.println(caminos.get(1).toString());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    private void cargarCombobox() {
        desdeComboBox.removeAllItems();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarPasaje;
    private javax.swing.JComboBox desdeComboBox;
    private javax.swing.JComboBox hastaComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelRuta;
    private javax.swing.JPanel panelRuta;
    private javax.swing.JTable tablaAgregado;
    private javax.swing.JTable tablaCalcular;
    // End of variables declaration//GEN-END:variables
    private void cargarComboBoxs() {
        desdeComboBox.removeAllItems();
        try {
            File archivo = new File(".\\Vertices.txt");
            FileReader fileReader = new FileReader(archivo);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String temporal, desde;
            while ((temporal = bufferedReader.readLine()) != null) {
                desdeComboBox.addItem(temporal);
            }
        } catch (Exception e) {

        }
    }

    public int getFila() {
        return fila;
    }

    public void setFila(int fila) {
        this.fila = fila;
    }

    private int random() {
        Random numero = new Random();
        int n = 0 + numero.nextInt(160);
        return n;
    }

    private Viaje checkNode(Viaje R) {
        Viaje[] arrayViaje = Grafo.getVertices().toArray(new Viaje[0]);
        for (int i = 0; i < arrayViaje.length; i++) {
            if (arrayViaje[i].equals(R)) {
                return arrayViaje[i];
            }
        }
        return null;
    }

}
